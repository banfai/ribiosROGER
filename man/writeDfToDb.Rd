% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/df.R
\name{writeDfToDb}
\alias{writeDfToDb}
\title{Write  data.frame to  a database connection}
\usage{
writeDfToDb(conn, data.frame, tableName = "testDf", row.names = FALSE,
  overwrite = FALSE, append = TRUE, ...)
}
\arguments{
\item{conn}{A database connection}

\item{data.frame}{The \code{data.frame} to be written}

\item{tableName}{The name of the table}

\item{row.names}{Logical, whether \code{row.names} are to be written}

\item{overwrite}{Logical, whether the table should be overwritten in case it exists}

\item{append}{Logical, whether the table should be appended in case it exists}

\item{...}{Other parameters passed to \code{dbWriteTable}

Compared with \code{\link{dbWriteTable}}, \code{writeDfToDb} checks the
parameters and returns the last row ID.}
}
\value{
\code{writeDfToDb} returns the last insert Row ID (currently only
supporting SQLite).
}
\description{
Write  data.frame to  a database connection
}
\examples{
library(RSQLite)
myList <- list(list(MyTeam="HSV", Score=18),
               list(MyTeam="BVB", Score=16))
myTestDf <- data.frame(Number=c(3,4),
                       Complex=I(lapply(myList, function(x) { serialize(x, NULL)})))
myCon <- dbConnect(SQLite(), ":memory:")
writeDfToDb(myCon, myTestDf, tableName="testDataFrame")
myTestDfOut <- readDfFromDb(myCon, "testDataFrame")
myTestDfOut
unserialize(myTestDfOut$Complex[[1]])
testthat::expect_equal(myTestDf, myTestDfOut)

}
